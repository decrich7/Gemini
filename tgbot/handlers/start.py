# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext

from tgbot.keyboards.lang import languages_markup
from tgbot.misc.throttling import rate_limit
from tgbot.services.db_api.schemas.user import User, UserAllForStat
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import decode_payload
from tgbot.services.lang_translate import _


@rate_limit(2, key='start')
async def start_bot(message: Message, state: FSMContext):
    args = message.text.split(' ')
    if len(args) == 2:
        await User.add_user(tg_id=message.from_user.id, username=message.from_user.username,
                            is_premium=message.from_user.is_premium,
                            language_code=message.from_user.language_code,
                            full_name=message.from_user.full_name, prime=False,
                            referal=args[-1], chat_id=message.chat.id, count_query=0)

        # await UserAllForStat.add_user(tg_id=message.from_user.id, username=message.from_user.username,
        #                     is_premium=message.from_user.is_premium,
        #                     language_code=message.from_user.language_code,
        #                     full_name=message.from_user.full_name, prime=False,
        #                     referal=args[-1], chat_id=message.chat.id, count_query=0)
    else:
        await User.add_user(tg_id=message.from_user.id, username=message.from_user.username,
                            is_premium=message.from_user.is_premium,
                            language_code=message.from_user.language_code,
                            full_name=message.from_user.full_name, prime=False,
                            referal=None, chat_id=message.chat.id, count_query=0)

        # await UserAllForStat.add_user(tg_id=message.from_user.id, username=message.from_user.username,
        #                     is_premium=message.from_user.is_premium,
        #                     language_code=message.from_user.language_code,
        #                     full_name=message.from_user.full_name, prime=False,
        #                     referal=None, chat_id=message.chat.id, count_query=0)
    await state.finish()
    # print(message.message_id)
    # print(message)

    await message.answer(_('üöÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!\n\n<strong>ü§ñ –Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –Ω–æ–≤–µ–π—à–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ Gemini –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Google.</strong>\n\n<strong>–ß—Ç–æ —è —É–º–µ—é:\n</strong>    1. üìÑ <i>–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ—á–∏–Ω–µ–Ω–∏–π, —ç—Å—Å—ç, –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã –∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è</i>\n\n    2. üåô <i>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤</i>\n\n    3. üîÆ <i>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã</i>\n\n   4. ü§µ‚Äç‚ôÇ <i>–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞</i>\n\n    5. üé• <i>–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫ Reels, TikTok, Shorts</i>\n    <strong>–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!</strong>\n\nüåå –í—Å—Ç—Ä–µ—á–∞–π –±—É–¥—É—â–µ–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å! üåå\n\nü§ì–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–∂–º–∏ - /help'))
    await message.answer(_('ü§î –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'), reply_markup=languages_markup)
    await message.answer(_('ü§†<strong>–ù–∞–∂–º–∏—Ç–µ</strong> - /mode –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏(<i>–ê—Å—Ç—Ä–æ–ª–æ–≥, –°—Ü–µ–Ω–∞—Ä–∏—Å—Ç –∏ —Ç.–¥</i>)'))



# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä text_contains, –æ–Ω —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ call.data
async def change_language(call: CallbackQuery):
    await call.message.edit_reply_markup()
    # –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ru)
    lang = call.data[-2:]

    await User.set_language(call.from_user.id, lang)

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫, –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—ã–π, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º locale=lang
    await call.message.answer(_("–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", locale=lang))


def register_start_bot(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands=['start'], state='*')
    dp.register_callback_query_handler(change_language, text_contains="lang")
